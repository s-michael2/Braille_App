<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RJCP.Diagnostics.Trace</name>
    </assembly>
    <members>
        <member name="T:RJCP.Diagnostics.Trace.LogSource">
             <summary>
             A <see cref="P:RJCP.Diagnostics.Trace.LogSource.TraceSource"/> wrapper for better performance tracing.
             </summary>
             <remarks>
             Use the <see cref="T:RJCP.Diagnostics.Trace.LogSource"/> class instead of a <see cref="T:System.Diagnostics.TraceSource"/> class to
             initialize logging, so that tests can be done with the <see cref="M:RJCP.Diagnostics.Trace.LogSource.ShouldTrace(System.Diagnostics.TraceEventType)"/> method.
             <para>
             The goal is to allow classes to test if tracing is enabled or not, before using the <see cref="P:RJCP.Diagnostics.Trace.LogSource.TraceSource"/>.
             This can help prevention of unnecessary objects on the heap by tracing only when tracing is needed.
             </para>
             <code language="csharp">
            <![CDATA[
            private static LogSource log = new LogSource("MyTrace");
            if (log.ShouldTrace(TraceEventType.Information))
              log.TraceSource.TraceEvent(TraceEventType.Information, id, $"Log Message: {errorCode}");
            ]]>
             </code>
             <para>
             This allows first a check if tracing is allowed or not, by doing a bitwise comparison, and only then if tracing
             is enabled, will the TraceEvent function be called thus allocating the <c>object[]</c> for params, then boxing
             the integer value <c>errorCode</c> into the <c>object[]</c> array.
             </para>
             </remarks>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.SetLogSource(System.Diagnostics.TraceSource)">
            <summary>
            Sets the Log Source for a specific <paramref name="source"/>.
            </summary>
            <param name="source">
            The <see cref="T:System.Diagnostics.TraceSource"/> that should be returned when queried.
            </param>
            <returns>
            If the <paramref name="source"/> was already defined (based on the category given in
            <see cref="P:System.Diagnostics.TraceSource.Name"/>), returns <see langword="true"/> indicating it was overwritten, else
            <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <remarks>
            Use this method to override setting a <see cref="T:System.Diagnostics.TraceSource"/> for a specific category
            before it is requested, as an alternative to using a configuration.
            </remarks>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.SetLogSource(System.String,System.Diagnostics.SourceLevels,System.Diagnostics.TraceListener)">
            <summary>
            Sets the Log Source for a specific <paramref name="name"/> to a particular <paramref name="listener"/>.
            </summary>
            <param name="name">The category name of the log source.</param>
            <param name="level">The switch trace level.</param>
            <param name="listener">The trace listener.</param>
            <returns>
            If the <paramref name="name"/> was already defined, returns <see langword="true"/> indicating it was
            overwritten, else <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">listener</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is an empty string.</exception>
            <remarks>
            Use this method to override setting a <see cref="T:System.Diagnostics.TraceSource"/> for a specific category
            before it is requested, as an alternative to using a configuration.
            </remarks>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.ClearLogSource">
            <summary>
            Clears all cached log sources
            </summary>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RJCP.Diagnostics.Trace.LogSource"/> class that doesn't log.
            </summary>
            <remarks>
            Provides a constructor for a logger object that doesn't log. The implementation is not completely empty, a
            <see cref="P:RJCP.Diagnostics.Trace.LogSource.TraceSource"/> is still available but effectively logging is disabled. It is possible to
            manipulate the <see cref="P:RJCP.Diagnostics.Trace.LogSource.TraceSource"/> property to enable logging. The name of the trace source is
            <c>default</c>.
            </remarks>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RJCP.Diagnostics.Trace.LogSource"/> class with the
            <see cref="T:System.Diagnostics.TraceSource"/> of the name provided.
            </summary>
            <param name="name">The name of the trace source.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> may not be <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> may not be empty.</exception>
        </member>
        <member name="P:RJCP.Diagnostics.Trace.LogSource.TraceSource">
            <summary>
            Gets the trace source.
            </summary>
            <value>The trace source object.</value>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.ShouldTrace(System.Diagnostics.TraceEventType)">
            <summary>
            Tests if tracing should be done for the log level provided.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns><see langword="true"/> if tracing is enabled; otherwise <see langword="false"/>.</returns>
            <remarks>Note, changing the trace source log level on the fly will not result in an update here.</remarks>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceEvent(System.Diagnostics.TraceEventType,System.String)">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="eventType">
            One of the enumeration values that specifies the event type of the trace data.
            </param>
            <param name="message">The trace message to write.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceEvent(System.Diagnostics.TraceEventType,System.String,System.Object[])">
            <summary>
            Writes a trace event message to the trace listeners in the <see cref="P:System.Diagnostics.TraceSource.Listeners"/> collection.
            </summary>
            <param name="eventType">Type of the event.</param>
            <param name="format">
            A composite format string that contains text intermixed with zero or more format items, which correspond to
            objects in the <paramref name="args"/> array.
            </param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceException(System.Exception,System.String,System.String)">
            <summary>
            Traces the exception with a level of detail based on the trace level.
            </summary>
            <param name="e">The exception to trace.</param>
            <param name="function">The function where the exception occurred.</param>
            <param name="message">The message to trace in addition.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceException(System.Exception,System.String,System.String,System.Object[])">
            <summary>
            Traces the exception with a level of detail based on the trace level.
            </summary>
            <param name="e">The exception to trace.</param>
            <param name="function">The function where the exception occurred.</param>
            <param name="format">The message to trace in addition.</param>
            <param name="args">The arguments used for formatting within <paramref name="format"/>.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceException(System.String,System.Exception,System.String,System.String)">
            <summary>
            Traces the exception with a level of detail based on the trace level.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="e">The exception to trace.</param>
            <param name="function">The function where the exception occurred.</param>
            <param name="message">The message to trace in addition.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.TraceException(System.String,System.Exception,System.String,System.String,System.Object[])">
            <summary>
            Traces the exception with a level of detail based on the trace level.
            </summary>
            <param name="name">The name of the object.</param>
            <param name="e">The exception to trace.</param>
            <param name="function">The function where the exception occurred.</param>
            <param name="format">The message to trace in addition.</param>
            <param name="args">The arguments used for formatting within <paramref name="format"/>.</param>
        </member>
        <member name="M:RJCP.Diagnostics.Trace.LogSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting managed and unmanaged
            resources.
            </summary>
        </member>
    </members>
</doc>
